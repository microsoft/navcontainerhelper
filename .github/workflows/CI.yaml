name: CICD

on:
  workflow_dispatch:
  push:
    paths-ignore:
      - 'README.md'
      - '.github/**'
    branches: [ master ]

permissions:
  contents: read

concurrency: CI

defaults:
  run:
    shell: PowerShell

jobs:
  AnalyzeTests:
    runs-on: [ windows-latest ]
    outputs:
      tests: ${{ steps.Analyze.outputs.tests }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Analyze
        id: Analyze
        run: |
          $tests = @(Get-ChildItem -Path (Join-Path $ENV:GITHUB_WORKSPACE 'Tests\*.Tests.ps1') | ForEach-Object { $_.BaseName }) | ConvertTo-Json -compress
          Add-Content -Path $env:GITHUB_OUTPUT -Value "tests=$tests"
          Write-Host "tests=$tests"

  RunTests:
    runs-on: [ windows-latest ]
    needs: [ AnalyzeTests ]
    strategy:
      matrix:
        test: ${{fromJson(needs.AnalyzeTests.outputs.tests)}}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run Tests
        run: |
          try {
            $errorActionPreference = "stop"
            Set-StrictMode -version 2.0
            $pesterContainer = New-PesterContainer -Path (Join-Path $ENV:GITHUB_WORKSPACE 'Tests\${{ matrix.test }}.ps1') -Data @{ "licenseFile" = '${{ secrets.licensefile }}'; "buildLicenseFile" = '${{ secrets.buildLicenseFile }}'; "insiderSasToken" = '${{ secrets.insiderSasToken }}' }
            $result = Invoke-Pester -Container $pesterContainer -passthru
            if ($result.FailedCount -gt 0) {
              Write-Host "::Error::$($result.FailedCount) tests are failing"
              $host.SetShouldExit(1)
            }
          }
          catch {
            Write-Host "::Error::Exception when running tests. The Error was $($_.Exception.Message)"
            $host.SetShouldExit(1)
          }

  Deploy:
    runs-on: [ windows-latest ]
    needs: [ RunTests ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Deploy
        run: |
          try {
            $path = Join-Path $ENV:TEMP "BcContainerHelper"
            New-Item -path $path -itemType Directory | Out-Null
            Copy-Item -path (Join-Path $ENV:GITHUB_WORKSPACE "*") -Destination $path -Recurse -Force

            Remove-Item -Path (Join-Path $path "Tests") -Force -Recurse
            Remove-Item -Path (Join-Path $path ".github") -Force -Recurse
            Remove-Item -Path (Join-Path $path ".git") -Force -Recurse
            Remove-Item -Path (Join-Path $path ".gitignore") -Force
            Remove-Item -Path (Join-Path $path "README.md") -Force

            $version = (Get-Content -Path (Join-Path $path 'Version.txt')).split('-')[0]
            $prerelease = "preview$(620+$ENV:GITHUB_RUN_NUMBER)"
            Set-Content -Path (Join-Path $path 'Version.txt') -value "$version-$prerelease"
          
            Write-Host "BcContainerHelper version $Version$prerelease"
          
            $modulePath = Join-Path $ENV:GITHUB_WORKSPACE "BcContainerHelper.psm1"
            Import-Module $modulePath -DisableNameChecking
          
            $functionsToExport = (get-module -Name BcContainerHelper).ExportedFunctions.Keys | Sort-Object
            $aliasesToExport = (get-module -Name BcContainerHelper).ExportedAliases.Keys | Sort-Object
          
            $releaseNotes = Get-Content -Path (Join-Path $path "ReleaseNotes.txt")
            $idx = $releaseNotes.IndexOf($version)
            if ($idx -lt 0) {
                throw 'No release notes identified'
            }
            $versionReleaseNotes = @()
            while ($releaseNotes[$idx]) {
                $versionReleaseNotes += $releaseNotes[$idx]
                $idx++
            }
          
            Write-Host "Release Notes:"
            Write-Host $VersionReleaseNotes
          
            Write-Host "Update Module Manifest"
            Update-ModuleManifest -Path (Join-Path $path "BcContainerHelper.psd1") `
                                  -RootModule "BcContainerHelper.psm1" `
                                  -ModuleVersion $version `
                                  -Prerelease $prerelease `
                                  -Author "Freddy Kristiansen" `
                                  -FunctionsToExport $functionsToExport `
                                  -AliasesToExport $aliasesToExport `
                                  -CompanyName "Microsoft" `
                                  -ReleaseNotes $versionReleaseNotes

            $certFileName = Join-Path $ENV:TEMP "$([GUID]::NewGuid().ToString()).pfx"
            Download-File -sourceUrl '${{ secrets.CodeSignCertificateUrl }}' -destinationFile $certFileName

            Remove-Module BcContainerHelper
          
            Write-Host $path
           
            Write-Host "Signing scripts"
            $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2($certFileName, '${{ secrets.CodeSignCertificatePassword }}')
            $filesToSign = @((Get-ChildItem $path -Filter "*.ps1" -Recurse -Depth 99).FullName)+
                           @((Get-ChildItem $path -Filter "*.psm1" -Recurse -Depth 99).FullName)
            Set-AuthenticodeSignature -Certificate $cert -HashAlgorithm SHA256 -TimestampServer "http://timestamp.digicert.com" -FilePath $filesToSign

            Write-Host "Upload to storage (preview)"
            $storageContext = New-AzureStorageContext -ConnectionString '${{ secrets.BchStorageConnectionString }}'
            New-AzureStorageContainer -Name 'public' -Context $storageContext -Permission 'Container' -ErrorAction Ignore | Out-Null
          
            Compress-Archive -path $path -DestinationPath "$($path).zip"
            Set-AzureStorageBlobContent -File "$($path).zip" -Context $storageContext -Container 'public' -Blob "$version-$prerelease.zip" -Force | Out-Null
            Set-AzureStorageBlobContent -File "$($path).zip" -Context $storageContext -Container 'public' -Blob "preview.zip" -Force | Out-Null
          
            Write-Host "Publishing Module"
            Publish-Module -Path $path -NuGetApiKey '${{ secrets.NugetKey }}' -SkipAutomaticTags
          }
          catch {
            Write-Host "::Error::Error publishing module. Error was $($_.Exception.Message)"
            $host.SetShouldExit(1)
          }
