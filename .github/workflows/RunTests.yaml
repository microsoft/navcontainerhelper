name: Run Tests

on:
  workflow_dispatch:
    inputs:
      ref:
        description: ref on which to run the end-2-end tests (default is head_sha on the current branch)
        required: false
        default: ''
      testPatterns:
        description: Commaseparated list of patterns to match against test names (default is * for all tests)
        required: false
        default: ''

permissions:
  contents: read
  actions: read
  pull-requests: write
  checks: write

concurrency:
  group: 'runTests-${{ github.event.inputs.ref }}'
  cancel-in-progress: true

defaults:
  run:
    shell: powershell

jobs:
  AnalyzeTests:
    runs-on: [ windows-latest ]
    outputs:
      tests: ${{ steps.Analyze.outputs.tests }}
      linuxtests: ${{ steps.Analyze.outputs.linuxtests }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref }}
          lfs: true
    
      - name: Analyze
        id: Analyze
        env:
          testPatterns: ${{ github.event.inputs.testPatterns }}
        run: |
          $errorActionPreference = "stop"
          $testPatterns = $ENV:TESTPATTERNS
          if (!$testPatterns) { $testPatterns = '*' }
          $testPatternArr = $testPatterns.Split(',')
          Write-Host "Running test matching patterns:"
          $testPatternArr | ForEach-Object { Write-Host "- $_" }
          $tests = ConvertTo-Json -compress -InputObject @(Get-ChildItem -Path (Join-Path $ENV:GITHUB_WORKSPACE 'Tests\*.Tests.ps1') | Where-Object { $name = $_.Basename;  $testPatternArr | Where-Object { $name -like "$($_).Tests" } } | ForEach-Object { $_.BaseName })
          Add-Content -Path $env:GITHUB_OUTPUT -Value "tests=$tests"
          Write-Host "tests=$tests"
          $linuxtests = ConvertTo-Json -compress -InputObject @(Get-ChildItem -Path (Join-Path $ENV:GITHUB_WORKSPACE 'LinuxTests\*.Tests.ps1') | Where-Object { $name = $_.Basename; $testPatternArr | Where-Object { $name -like "$($_).Tests" } } | ForEach-Object { $_.BaseName })
          Add-Content -Path $env:GITHUB_OUTPUT -Value "linuxtests=$linuxtests"
          Write-Host "linuxtests=$linuxtests"

  PS5:
    runs-on: [ windows-latest ]
    needs: [ AnalyzeTests ]
    if: needs.AnalyzeTests.outputs.tests != '[]'
    strategy:
      matrix:
        test: ${{fromJson(needs.AnalyzeTests.outputs.tests)}}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref }}
          lfs: true
    
      - name: Run Tests
        run: |
          try {
            $errorActionPreference = "stop"
            Set-StrictMode -version 2.0
            $licenseFile = "$([System.IO.Path]::GetTempFileName()).flf"
            [System.IO.File]::WriteAllBytes($licenseFile, ([Convert]::FromBase64String('${{ secrets.licensefile }}')))
            $buildLicenseFile = "$([System.IO.Path]::GetTempFileName()).flf"
            [System.IO.File]::WriteAllBytes($buildLicenseFile, ([Convert]::FromBase64String('${{ secrets.buildLicensefile }}')))
            $pesterContainer = New-PesterContainer -Path (Join-Path $ENV:GITHUB_WORKSPACE 'Tests\${{ matrix.test }}.ps1') -Data @{ "licenseFile" = $licenseFile; "buildLicenseFile" = $buildLicenseFile }
            $result = Invoke-Pester -Container $pesterContainer -passthru
            if ($result.FailedCount -gt 0) {
              Write-Host "::Error::$($result.FailedCount) tests are failing"
              $host.SetShouldExit(1)
            }
          }
          catch {
            Write-Host "::Error::Exception when running tests. The Error was $($_.Exception.Message)"
            $host.SetShouldExit(1)
          }

  PS7:
    runs-on: [ windows-latest ]
    needs: [ AnalyzeTests ]
    if: needs.AnalyzeTests.outputs.tests != '[]'
    strategy:
      matrix:
        test: ${{fromJson(needs.AnalyzeTests.outputs.tests)}}
      fail-fast: false
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref }}
          lfs: true
    
      - name: Run Tests
        run: |
          try {
            $errorActionPreference = "stop"
            Set-StrictMode -version 2.0
            $licenseFile = "$([System.IO.Path]::GetTempFileName()).flf"
            [System.IO.File]::WriteAllBytes($licenseFile, ([Convert]::FromBase64String('${{ secrets.licensefile }}')))
            $buildLicenseFile = "$([System.IO.Path]::GetTempFileName()).flf"
            [System.IO.File]::WriteAllBytes($buildLicenseFile, ([Convert]::FromBase64String('${{ secrets.buildLicensefile }}')))
            $pesterContainer = New-PesterContainer -Path (Join-Path $ENV:GITHUB_WORKSPACE 'Tests\${{ matrix.test }}.ps1') -Data @{ "licenseFile" = $licenseFile; "buildLicenseFile" = $buildLicenseFile }
            $result = Invoke-Pester -Container $pesterContainer -passthru
            if ($result.FailedCount -gt 0) {
              Write-Host "::Error::$($result.FailedCount) tests are failing"
              $host.SetShouldExit(1)
            }
          }
          catch {
            Write-Host "::Error::Exception when running tests. The Error was $($_.Exception.Message)"
            $host.SetShouldExit(1)
          }

  Linux:
    runs-on: [ ubuntu-latest ]
    needs: [ AnalyzeTests ]
    if: needs.AnalyzeTests.outputs.linuxtests != '[]'
    strategy:
      matrix:
        test: ${{fromJson(needs.AnalyzeTests.outputs.linuxtests)}}
      fail-fast: false
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref }}
          lfs: true
    
      - name: Run Tests
        run: |
          try {
            $errorActionPreference = "stop"
            Set-StrictMode -version 2.0
            $licenseFile = "$([System.IO.Path]::GetTempFileName()).flf"
            [System.IO.File]::WriteAllBytes($licenseFile, ([Convert]::FromBase64String('${{ secrets.licensefile }}')))
            $buildLicenseFile = "$([System.IO.Path]::GetTempFileName()).flf"
            [System.IO.File]::WriteAllBytes($buildLicenseFile, ([Convert]::FromBase64String('${{ secrets.buildLicensefile }}')))
            $pesterContainer = New-PesterContainer -Path (Join-Path $ENV:GITHUB_WORKSPACE 'LinuxTests\${{ matrix.test }}.ps1') -Data @{ "licenseFile" = $licenseFile; "buildLicenseFile" = $buildLicenseFile }
            $result = Invoke-Pester -Container $pesterContainer -passthru
            if ($result.FailedCount -gt 0) {
              Write-Host "::Error::$($result.FailedCount) tests are failing"
              $host.SetShouldExit(1)
            }
          }
          catch {
            Write-Host "::Error::Exception when running tests. The Error was $($_.Exception.Message)"
            $host.SetShouldExit(1)
          }
